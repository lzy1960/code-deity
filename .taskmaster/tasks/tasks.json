{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Core Project Setup & Vitest Environment",
        "description": "Initialize the Nuxt 4 project with Vite, TypeScript, and Pinia. Configure Vitest for unit testing and verify its setup with a simple test.",
        "details": "This task covers the initial project scaffolding and setting up the testing framework as per PRD section '1. 环境与测试搭建'. Ensure `package.json` reflects the core technology stack. A basic `sum.test.ts` or similar should be created and pass.",
        "testStrategy": "Run `vitest` command to ensure all configured tests pass, including the initial example test.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Configuration-Driven Architecture",
        "description": "Create the `gameConfig.ts` file and define the initial structure for core game balance values, ensuring all future game logic can read from it.",
        "details": "As per PRD principle '配置驱动' and task '2. 配置驱动架构', create `gameConfig.ts` in a suitable location (e.g., `utils/` or `config/`). Define initial placeholder structures for values like `generator_base_cost`, `prestige_formula_exponent`, etc. No hardcoded 'magic numbers' should appear in business logic.",
        "testStrategy": "Verify `gameConfig.ts` exists and contains a well-structured object with example configuration values. Ensure it can be imported into other files without errors.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Design Versioned Save System Architecture",
        "description": "Design the initial save data structure to include a `version` field and implement the foundational `loadGame` function with a migration framework hook.",
        "details": "Adhering to PRD principle '版本化存档' and task '3. 版本化存档架构', define a global save data interface/type. The root of this object *must* contain `version: '1.0'`. The `loadGame` function should be implemented to check this version and include a placeholder or basic logic for future migration scripts.",
        "testStrategy": "Create a dummy save file with `version: '1.0'`. Implement a basic `loadGame` function that successfully reads this version. Simulate an older version and ensure the `loadGame` function correctly identifies it (even if no migration logic is present yet).",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Integrate Core Libraries & Persistence Layer",
        "description": "Integrate `decimal.js` for large number handling and `Dexie.js` for IndexedDB. Implement `saveGame` and `loadGame` functions using Dexie.js, and set up an automatic save timer.",
        "details": "As per PRD task '4. 技术验证', introduce `decimal.js` and perform basic arithmetic verification. Integrate `Dexie.js` to manage IndexedDB. The `saveGame` and `loadGame` functions must utilize the versioned save structure defined in Task 3. Implement a timer that periodically calls `saveGame`.",
        "testStrategy": "Perform basic calculations with `break_infinity.js` to ensure it handles large numbers correctly. Manually trigger `saveGame` and `loadGame` to verify data persistence and retrieval from IndexedDB. Observe the auto-save timer in action.",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop Generator System & Game Loop",
        "description": "Implement the core game loop service and the purchase logic for 8 tiers of generators, ensuring all numerical values are sourced from `gameConfig.ts`.",
        "details": "This task aligns with PRD task '1. 生成器系统'. Create a `Generator` component or module. Implement the logic for buying generators, which should update player resources and generator counts. The cost, production rates, and any other related numerical parameters *must* be read from `gameConfig.ts` (Task 2). Develop a central game loop service responsible for updating game state over time.",
        "testStrategy": "Manually test purchasing generators and observe resource changes. Verify that generator costs and production rates dynamically update if `gameConfig.ts` values are changed. Write unit tests for generator cost calculation and production calculation functions.",
        "priority": "high",
        "dependencies": [
          2,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Reset (Prestige) System",
        "description": "Create the UI for '重构' and '编译' tabs and implement the complete logic for both layers of reset, including the '版本号' upgrade tree.",
        "details": "As per PRD task '2. 重置系统', design and implement the user interface for the reset tabs. Develop the backend logic for calculating prestige points ('重构点', '编译点') and applying their effects. All formula parameters for these calculations *must* be sourced from `gameConfig.ts` (Task 2). Implement the '版本号' upgrade system that consumes prestige points.",
        "testStrategy": "Manually trigger resets and verify that the correct amount of prestige points are awarded and applied. Test the '版本号' upgrade tree to ensure upgrades are purchased and provide expected bonuses. Write unit tests for prestige point calculation functions.",
        "priority": "high",
        "dependencies": [
          2,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Unit Tests for Core Game Logic Functions",
        "description": "Write comprehensive unit tests for all critical pure functions related to game mechanics, including generator costs, production, and reset calculations.",
        "details": "This task directly addresses PRD principle '单元测试' and task '3. 质量保证'. Develop unit tests using Vitest (Task 1) for functions such as: generator cost calculation, per-second production calculation, '重构点' (RP) acquisition calculation, and '代码优雅度' (code elegance) bonus calculation. These tests should cover edge cases and ensure correctness.",
        "testStrategy": "Run `vitest` command. All newly written unit tests for core game logic functions must pass. Ensure good code coverage for these critical functions.",
        "priority": "high",
        "dependencies": [
          1,
          5,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Basic Main UI & Automation Features",
        "description": "Build the foundational main game user interface to display resources, generators, and reset options. Implement the automated purchase functionality for generators.",
        "details": "This task covers parts of PRD task '1. 生成器系统' (UI for generators) and '4. 其他系统'. Design a clean, functional main game screen. Implement the logic for automated purchasing of generators, which should respect player resources and generator availability. The automation parameters should ideally be configurable via `gameConfig.ts`.",
        "testStrategy": "Visually inspect the main UI to ensure all core elements are present and functional. Activate auto-purchase and observe if generators are bought automatically when resources are available.",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Supabase Project Setup & RLS Configuration",
        "description": "Create a new Supabase project, configure the necessary authentication providers (Google), define initial database tables, and enable Row Level Security (RLS).",
        "details": "This task aligns with PRD section '4. 后端搭建'. Set up a Supabase project. Configure Google as an authentication provider. Create initial database tables required for user profiles and game save data. Implement basic RLS policies to secure user data.",
        "testStrategy": "Verify Supabase project creation. Confirm Google Auth is enabled. Use Supabase Studio to check table schemas and RLS policies are active and correctly configured.",
        "priority": "medium",
        "dependencies": [],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Capacitor Initialization for Android",
        "description": "Initialize Capacitor within the Nuxt project, add the Android platform, and perform initial debugging in Android Studio.",
        "details": "This task is the first step in PRD section '1. App 打包'. Run `npx cap init` to initialize Capacitor. Add the Android platform using `npx cap add android`. Open the project in Android Studio and ensure it builds and runs on an emulator or physical device.",
        "testStrategy": "Successfully build and run the blank Capacitor Android app on an emulator or device. Verify that the Nuxt web view loads correctly within the native container.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "todo",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-09T03:39:25.805Z",
      "updated": "2025-09-09T09:47:09.408Z",
      "description": "Tasks for master context"
    }
  }
}